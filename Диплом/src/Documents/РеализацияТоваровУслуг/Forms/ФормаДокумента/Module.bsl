
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	ВКМ_ДобавитьКнопкуЗаполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти



#Область СлужебныеПроцедурыИФункции  
//@skip-check module-unused-method
&НаКлиенте
Процедура Заполнить(Команда)
    Если ЗначениеЗаполнено(Объект.Услуги) Тогда
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьОтвет", ЭтотОбъект);
		
		Кнопки = Новый СписокЗначений();
		Кнопки.Добавить(1,"Да");
		Кнопки.Добавить(0,"Нет");	
		
		ДопПараметры = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ДопПараметры.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ДопПараметры.Заголовок = "Перезаполнить таблицу ""Услуги""?";
		ДопПараметры.КнопкаПоУмолчанию = "Да";
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОповещениеОЗакрытии,НСтр("ru = 'Таблица услуги содержит строки. Перезаполнить?'"),  Кнопки ,   ДопПараметры);	
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;	
КонецПроцедуры       

&НаСервере
Процедура ВКМ_ДобавитьКнопкуЗаполнить()
	
	КомандаСформироватьТаблицу =     Команды.Добавить("Заполнить");
	КомандаСформироватьТаблицу.Действие = "Заполнить";
	КомандаСформироватьТаблицу.Заголовок = "Заполнить";
	КнопкаСформироватьТаблицу = Элементы.Добавить("КнопкаСформироватьТаблицу", Тип("КнопкаФормы"), Элементы.ФормаКоманднаяПанель);
	КнопкаСформироватьТаблицу.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаСформироватьТаблицу.ИмяКоманды = "Заполнить";
	
КонецПроцедуры	


&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры



&НаСервере 
Функция ВернутьДанныеАбоненсткогоДоговора()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
	               |	ДоговорыКонтрагентов.ВКМ_АбоненсткаяПлата КАК ВКМ_АбоненсткаяПлата,
	               |	ДоговорыКонтрагентов.ВКМ_СтоимостьЧаса КАК ВКМ_СтоимостьЧаса,
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК АбонентскийДоговор
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Ссылка = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Объект.Договор);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции 

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды   

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере() 
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ДанныеАбоненсткогоДоговора = ВернутьДанныеАбоненсткогоДоговора();
		
		Если ДанныеАбоненсткогоДоговора.АбонентскийДоговор Тогда
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ДокументОбъект.ВыполнитьАвтозаполнение();
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");	
		КонецЕсли
	КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьОтвет(Ответ, ДополнительныеПараметры) Экспорт  
	
	Если ЗначениеЗаполнено(Ответ) ТОгда
		Если Ответ.Значение = 1 Тогда
			ЗаполнитьНаСервере();	       
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;                         
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти
